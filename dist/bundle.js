/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./src/index.js":
/*!**********************!*\
  !*** ./src/index.js ***!
  \**********************/
/***/ (() => {

eval("function _typeof(o) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && \"function\" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? \"symbol\" : typeof o; }, _typeof(o); }\nfunction _classCallCheck(a, n) { if (!(a instanceof n)) throw new TypeError(\"Cannot call a class as a function\"); }\nfunction _defineProperties(e, r) { for (var t = 0; t < r.length; t++) { var o = r[t]; o.enumerable = o.enumerable || !1, o.configurable = !0, \"value\" in o && (o.writable = !0), Object.defineProperty(e, _toPropertyKey(o.key), o); } }\nfunction _createClass(e, r, t) { return r && _defineProperties(e.prototype, r), t && _defineProperties(e, t), Object.defineProperty(e, \"prototype\", { writable: !1 }), e; }\nfunction _toPropertyKey(t) { var i = _toPrimitive(t, \"string\"); return \"symbol\" == _typeof(i) ? i : i + \"\"; }\nfunction _toPrimitive(t, r) { if (\"object\" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || \"default\"); if (\"object\" != _typeof(i)) return i; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (\"string\" === r ? String : Number)(t); }\nfunction _callSuper(t, o, e) { return o = _getPrototypeOf(o), _possibleConstructorReturn(t, _isNativeReflectConstruct() ? Reflect.construct(o, e || [], _getPrototypeOf(t).constructor) : o.apply(t, e)); }\nfunction _possibleConstructorReturn(t, e) { if (e && (\"object\" == _typeof(e) || \"function\" == typeof e)) return e; if (void 0 !== e) throw new TypeError(\"Derived constructors may only return object or undefined\"); return _assertThisInitialized(t); }\nfunction _assertThisInitialized(e) { if (void 0 === e) throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); return e; }\nfunction _inherits(t, e) { if (\"function\" != typeof e && null !== e) throw new TypeError(\"Super expression must either be null or a function\"); t.prototype = Object.create(e && e.prototype, { constructor: { value: t, writable: !0, configurable: !0 } }), Object.defineProperty(t, \"prototype\", { writable: !1 }), e && _setPrototypeOf(t, e); }\nfunction _wrapNativeSuper(t) { var r = \"function\" == typeof Map ? new Map() : void 0; return _wrapNativeSuper = function _wrapNativeSuper(t) { if (null === t || !_isNativeFunction(t)) return t; if (\"function\" != typeof t) throw new TypeError(\"Super expression must either be null or a function\"); if (void 0 !== r) { if (r.has(t)) return r.get(t); r.set(t, Wrapper); } function Wrapper() { return _construct(t, arguments, _getPrototypeOf(this).constructor); } return Wrapper.prototype = Object.create(t.prototype, { constructor: { value: Wrapper, enumerable: !1, writable: !0, configurable: !0 } }), _setPrototypeOf(Wrapper, t); }, _wrapNativeSuper(t); }\nfunction _construct(t, e, r) { if (_isNativeReflectConstruct()) return Reflect.construct.apply(null, arguments); var o = [null]; o.push.apply(o, e); var p = new (t.bind.apply(t, o))(); return r && _setPrototypeOf(p, r.prototype), p; }\nfunction _isNativeReflectConstruct() { try { var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); } catch (t) {} return (_isNativeReflectConstruct = function _isNativeReflectConstruct() { return !!t; })(); }\nfunction _isNativeFunction(t) { try { return -1 !== Function.toString.call(t).indexOf(\"[native code]\"); } catch (n) { return \"function\" == typeof t; } }\nfunction _setPrototypeOf(t, e) { return _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function (t, e) { return t.__proto__ = e, t; }, _setPrototypeOf(t, e); }\nfunction _getPrototypeOf(t) { return _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function (t) { return t.__proto__ || Object.getPrototypeOf(t); }, _getPrototypeOf(t); }\nvar Chatbot = /*#__PURE__*/function (_HTMLElement) {\n  function Chatbot() {\n    var _this;\n    _classCallCheck(this, Chatbot);\n    _this = _callSuper(this, Chatbot);\n    _this.token = _this.getAttribute('token');\n    _this.attachShadow({\n      mode: 'open'\n    });\n    _this.shadowRoot.innerHTML = \"\\n      <style>\\n        .chatbot-button {\\n          position: fixed;\\n          bottom: 20px;\\n          right: 20px;\\n          background-color: #4CAF50;\\n          border: none;\\n          color: white;\\n          text-align: center;\\n          padding: 15px;\\n          border-radius: 50%;\\n          cursor: pointer;\\n          z-index: 1000;\\n        }\\n\\n        .chatbot-container {\\n          position: fixed;\\n          bottom: 80px;\\n          right: 20px;\\n          width: 300px;\\n          height: 400px;\\n          background-color: white;\\n          border: 1px solid #ccc;\\n          border-radius: 10px;\\n          box-shadow: 0px 0px 10px rgba(0, 0, 0, 0.1);\\n          display: none;\\n          z-index: 999;\\n        }\\n\\n        .chatbot-header {\\n          background-color: #4CAF50;\\n          color: white;\\n          padding: 10px;\\n          border-top-left-radius: 10px;\\n          border-top-right-radius: 10px;\\n        }\\n\\n        .chatbot-content {\\n          padding: 10px;\\n          height: 300px;\\n          overflow-y: auto;\\n        }\\n\\n        .chatbot-input {\\n          width: calc(100% - 20px);\\n          padding: 10px;\\n          border: none;\\n          border-top: 1px solid #ccc;\\n        }\\n\\n        .message {\\n          margin: 10px 0;\\n          display: flex;\\n          align-items: center;\\n        }\\n\\n        .message.user {\\n          justify-content: flex-end;\\n        }\\n\\n        .message.user .message-content {\\n          background-color: #4CAF50;\\n          color: white;\\n        }\\n\\n        .message.bot .message-content {\\n          background-color: #f1f1f1;\\n          color: black;\\n        }\\n\\n        .message-content {\\n          max-width: 70%;\\n          padding: 10px;\\n          border-radius: 10px;\\n        }\\n\\n        .message img {\\n          width: 30px;\\n          height: 30px;\\n          border-radius: 50%;\\n          margin-right: 10px;\\n        }\\n      </style>\\n      <button class=\\\"chatbot-button\\\">Chat</button>\\n      <div class=\\\"chatbot-container\\\">\\n        <div class=\\\"chatbot-header\\\">Chatbot</div>\\n        <div class=\\\"chatbot-content\\\" id=\\\"chat-content\\\"></div>\\n        <input type=\\\"text\\\" class=\\\"chatbot-input\\\" id=\\\"chat-input\\\" placeholder=\\\"Escribe un mensaje...\\\">\\n      </div>\\n    \";\n    _this.button = _this.shadowRoot.querySelector('.chatbot-button');\n    _this.container = _this.shadowRoot.querySelector('.chatbot-container');\n    _this.button.addEventListener('click', function () {\n      return _this.toggleChat();\n    });\n    return _this;\n  }\n  _inherits(Chatbot, _HTMLElement);\n  return _createClass(Chatbot, [{\n    key: \"toggleChat\",\n    value: function toggleChat() {\n      this.container.style.display = this.container.style.display === 'none' ? 'block' : 'none';\n    }\n  }, {\n    key: \"connectedCallback\",\n    value: function connectedCallback() {\n      var _this2 = this;\n      this.shadowRoot.querySelector('#chat-input').addEventListener('keypress', function (event) {\n        if (event.key === 'Enter') {\n          _this2.sendMessage(event);\n        }\n      });\n\n      // Ejemplo de mensaje inicial del bot\n      this.addMessage('bot', 'Hello, how can we help you today?');\n    }\n  }, {\n    key: \"sendMessage\",\n    value: function sendMessage(event) {\n      var _this3 = this;\n      var input = this.shadowRoot.querySelector('#chat-input');\n      var message = input.value;\n      if (message.trim() !== '') {\n        this.addMessage('user', message);\n        input.value = '';\n\n        // Simular una respuesta del bot después de 1 segundo\n        setTimeout(function () {\n          _this3.addMessage('bot', 'Esta es una respuesta automática del bot.');\n        }, 1000);\n      }\n    }\n  }, {\n    key: \"addMessage\",\n    value: function addMessage(sender, message) {\n      var chatContent = this.shadowRoot.querySelector('#chat-content');\n      var messageElement = document.createElement('div');\n      messageElement.classList.add('message', sender);\n      if (sender === 'bot') {\n        messageElement.innerHTML = \"\\n        <img src=\\\"path/to/bot-avatar.png\\\" alt=\\\"Bot\\\">\\n        <div class=\\\"message-content\\\">\".concat(message, \"</div>\\n      \");\n      } else {\n        messageElement.innerHTML = \"\\n        <div class=\\\"message-content\\\">\".concat(message, \"</div>\\n      \");\n      }\n      chatContent.appendChild(messageElement);\n      chatContent.scrollTop = chatContent.scrollHeight;\n    }\n  }]);\n}( /*#__PURE__*/_wrapNativeSuper(HTMLElement));\ncustomElements.define('chat-bot', Chatbot);\n\n//# sourceURL=webpack://libreriaproyect/./src/index.js?");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = {};
/******/ 	__webpack_modules__["./src/index.js"]();
/******/ 	
/******/ })()
;